name: Install MPAS Dependencies with NVIDIA OpenACC

env:
  ACTIONS_STEP_DEBUG: true

on:
  workflow_dispatch:
    
    # push:
    #     branches:
    #         - mpas_cicd
    # pull_request:
    #     branches:
    #         - mpas_cicd

jobs:
  setup:
    name: Install MPAS Libraries for NVIDIA OpenACC
    runs-on: ubuntu-latest
    container: 
      image: nvcr.io/nvidia/nvhpc:25.3-devel-cuda_multi-ubuntu22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check MPI installation
        run: |
          echo "Checking MPI version..."
          mpicc --version
          mpirun --version

      - name: Check Fortran compiler
        run: |
          echo "Fortran version:"
          nvfortran --version

      - name: Install CMake
        run: |
          apt-get update
          apt-get install -y cmake

      - name: Install curl
        run: |
          apt-get update
          apt-get install -y curl
    
      - name: Install libcurl development package
        run: |
          apt-get update
          apt-get install -y libcurl4-openssl-dev

      - name: Debug NVIDIA HPC SDK paths
        run: |
          echo "Listing /opt/nvidia/hpc_sdk contents:"
          ls -la /opt/nvidia/hpc_sdk/
          echo "Listing Linux_x86_64 contents (if exists):"
          ls -la /opt/nvidia/hpc_sdk/Linux_x86_64/ || echo "Directory not found"
          echo "Looking for nvhpc-vars.sh:"
          find /opt/nvidia/hpc_sdk -name "nvhpc-vars.sh" || echo "File not found"
          echo "Looking for environment setup files:"
          find /opt/nvidia/hpc_sdk -type f -name "*vars.sh"
          echo "Full directory tree of hpc_sdk:"
          tree /opt/nvidia/hpc_sdk || (find /opt/nvidia/hpc_sdk -type d)

      - name: Set environment variables
        shell: bash
        run: |
          # Load NVIDIA HPC SDK module
          apt-get update && apt-get install -y environment-modules
          . /etc/profile.d/modules.sh
          module use /opt/nvidia/hpc_sdk/modulefiles
          module load nvhpc-hpcx-cuda12
          
          export LIBSRC=/tmp/sources
          export LIBBASE=${GITHUB_WORKSPACE}/mpas-libs
          export SERIAL_FC=nvfortran
          export SERIAL_F77=nvfortran
          export SERIAL_CC=nvc
          export SERIAL_CXX=nvc++
          export MPI_FC=mpifort
          export MPI_F77=mpifort
          export MPI_CC=mpicc
          export MPI_CXX=mpic++
          
          # Set correct MPI paths
          export MPI_ROOT=/opt/nvidia/hpc_sdk/Linux_x86_64/25.3/comm_libs/mpi
          export LD_LIBRARY_PATH=${MPI_ROOT}/lib:${LD_LIBRARY_PATH}
          export PATH=${MPI_ROOT}/bin:${PATH}
          
          echo "LIBSRC=$LIBSRC" >> $GITHUB_ENV
          echo "LIBBASE=$LIBBASE" >> $GITHUB_ENV
          echo "SERIAL_FC=$SERIAL_FC" >> $GITHUB_ENV
          echo "SERIAL_F77=$SERIAL_F77" >> $GITHUB_ENV
          echo "SERIAL_CC=$SERIAL_CC" >> $GITHUB_ENV
          echo "SERIAL_CXX=$SERIAL_CXX" >> $GITHUB_ENV
          echo "MPI_FC=$MPI_FC" >> $GITHUB_ENV
          echo "MPI_F77=$MPI_F77" >> $GITHUB_ENV
          echo "MPI_CC=$MPI_CC" >> $GITHUB_ENV
          echo "MPI_CXX=$MPI_CXX" >> $GITHUB_ENV
          echo "MPI_ROOT=$MPI_ROOT" >> $GITHUB_ENV

      - name: Create source directory
        run: mkdir -p ${{ env.LIBSRC }}

    # - name: Install MPICH
    #   run: |
    #     wget -P ${{ env.LIBSRC }} http://www2.mmm.ucar.edu/people/duda/files/mpas/sources/mpich-3.3.1.tar.gz
    #     tar xzvf ${{ env.LIBSRC }}/mpich-3.3.1.tar.gz
    #     cd mpich-3.3.1
    #     ./configure --prefix=${{ env.LIBBASE }}
    #     make -j 4
    #     make install
    #     export PATH=${{ env.LIBBASE }}/bin:$PATH
    #     export LD_LIBRARY_PATH=${{ env.LIBBASE }}/lib:$LD_LIBRARY_PATH
    #     cd ..
    #     rm -rf mpich-3.3.1


      - name: Install Zlib
        run: |
          wget -P ${{ env.LIBSRC }} http://www2.mmm.ucar.edu/people/duda/files/mpas/sources/zlib-1.2.11.tar.gz
          tar xzvf ${{ env.LIBSRC }}/zlib-1.2.11.tar.gz
          cd zlib-1.2.11
          CC=${{ env.SERIAL_CC }} 
          ./configure --prefix=${{ env.LIBBASE }} --static
          make -j 4
          make install
          cd ..
          rm -rf zlib-1.2.11

      - name: Install HDF5
        run: |
          wget -P ${{ env.LIBSRC }} http://www2.mmm.ucar.edu/people/duda/files/mpas/sources/hdf5-1.10.5.tar.bz2
          #bzip2 needed to extract hdf5
          #apt-get install -y bzip2
          tar xjvf ${{ env.LIBSRC }}/hdf5-1.10.5.tar.bz2
          cd hdf5-1.10.5
          export FC=${{ env.MPI_FC }}
          export CC=${{ env.MPI_CC }}
          export CXX=${{ env.MPI_CXX }}
          ./configure --prefix=${{ env.LIBBASE }} --enable-parallel --with-zlib=${{ env.LIBBASE }} --disable-shared
          make -j 4
          make install
          cd ..
          rm -rf hdf5-1.10.5

      - name: Install Parallel-netCDF
        run: |
          wget -P ${{ env.LIBSRC }} http://www2.mmm.ucar.edu/people/duda/files/mpas/sources/pnetcdf-1.11.2.tar.gz
          tar xzvf ${{ env.LIBSRC }}/pnetcdf-1.11.2.tar.gz
          cd pnetcdf-1.11.2
          ./configure --prefix=${{ env.LIBBASE }}
          make -j 4
          make install
          export PNETCDF=${{ env.LIBBASE }}
          cd ..
          rm -rf pnetcdf-1.11.2

      - name: Install NetCDF-C
        run: |
          wget -P ${{ env.LIBSRC }} http://www2.mmm.ucar.edu/people/duda/files/mpas/sources/netcdf-c-4.7.0.tar.gz
          tar xzvf ${{ env.LIBSRC }}/netcdf-c-4.7.0.tar.gz
          cd netcdf-c-4.7.0
          # Set up environment with correct MPI paths
          export CPPFLAGS="-I${{ env.LIBBASE }}/include -I${{ env.MPI_ROOT }}/include"
          export LDFLAGS="-L${{ env.LIBBASE }}/lib -L${{ env.MPI_ROOT }}/lib"
          export LD_LIBRARY_PATH="${{ env.MPI_ROOT }}/lib:${LD_LIBRARY_PATH}"
          export LIBS="-lhdf5_hl -lhdf5 -lz -ldl"
          export CC=${{ env.MPI_CC }}
          ./configure --prefix=${{ env.LIBBASE }} \
                     --disable-dap \
                     --enable-netcdf4 \
                     --enable-pnetcdf \
                     --enable-cdf5 \
                     --enable-parallel-tests \
                     --disable-shared \
                     --with-mpi="${{ env.MPI_ROOT }}"
          make -j 4 V=1
          make install
          export NETCDF=${{ env.LIBBASE }}
          cd ..
          rm -rf netcdf-c-4.7.0

      - name: Install NetCDF-Fortran
        run: |
          wget -P ${{ env.LIBSRC }} http://www2.mmm.ucar.edu/people/duda/files/mpas/sources/netcdf-fortran-4.4.5.tar.gz
          tar xzvf ${{ env.LIBSRC }}/netcdf-fortran-4.4.5.tar.gz
          cd netcdf-fortran-4.4.5
          export FC=${{ env.MPI_FC }}
          export F77=${{ env.MPI_F77 }}
          export LIBS="-lnetcdf ${LIBS}"
          export FFLAGS="-g -fbacktrace -fallow-argument-mismatch"
          export FCFLAGS="-g -fbacktrace -fallow-argument-mismatch"
          export CPPFLAGS="-I${{ env.LIBBASE }}/include"
          export LDFLAGS="-L${{ env.LIBBASE }}/lib"
          ./configure --prefix=${{ env.LIBBASE }} --enable-parallel-tests --disable-shared || (echo "Configure failed. Printing config.log:" && cat config.log && exit 1)
          make -j 4
          make install
          cd ..
          rm -rf netcdf-fortran-4.4.5

      - name: Install PIO
        run: |
          git clone https://github.com/NCAR/ParallelIO
          cd ParallelIO
          git checkout -b pio-2.5.10 pio2_5_10
          export PIOSRC=`pwd`
          cd ..
          mkdir pio
          cd pio
          export CC=${{ env.MPI_CC }}
          export FC=${{ env.MPI_FC }}
          cmake -DNetCDF_C_PATH=${{ env.NETCDF }} \
                -DNetCDF_Fortran_PATH=${{ env.NETCDF }} \
                -DPnetCDF_PATH=${{ env.PNETCDF }} \
                -DHDF5_PATH=${{ env.NETCDF }} \
                -DCMAKE_INSTALL_PREFIX=${{ env.LIBBASE }} \
                -DPIO_USE_MALLOC=ON \
                -DCMAKE_VERBOSE_MAKEFILE=1 \
                -DPIO_ENABLE_TIMING=OFF \
                -DMPI_C_INCLUDE_PATH=/usr/include/mpich \
                -DMPI_Fortran_INCLUDE_PATH=/usr/include/mpich \
                $PIOSRC
          make
          make install
          cd ..
          rm -rf pio ParallelIO
          export PIO=${{ env.LIBBASE }}

      - name: Set MPAS environment variables
        run: |
          export MPAS_EXTERNAL_LIBS="-L${{ env.LIBBASE }}/lib -lhdf5_hl -lhdf5 -ldl -lz -lpnetcdf"
          export MPAS_EXTERNAL_INCLUDES="-I${{ env.LIBBASE }}/include"
          export PNETCDF=${{ env.LIBBASE }}
          echo "MPAS_EXTERNAL_LIBS=$MPAS_EXTERNAL_LIBS" >> $GITHUB_ENV
          echo "MPAS_EXTERNAL_INCLUDES=$MPAS_EXTERNAL_INCLUDES" >> $GITHUB_ENV
          echo "PNETCDF=$PNETCDF" >> $GITHUB_ENV

      - name: Create tarball of LIBBASE
        run: |
          tar -czf mpas-libs-nvidia.25.3.tar.gz -C ${{ env.LIBBASE }} .

      - name: Upload LIBBASE as artifact
        uses: actions/upload-artifact@v4
        with:
          name: mpas-libs-nvidia-25.3
          path: mpas-libs-nvidia-25.3.tar.gz
          compression-level: 9

      - name: Debug Environment
        if: always()
        run: |
          echo "NVIDIA HPC SDK Version:"
          nvfortran --version
          echo "MPI Version:"
          mpicc --version
          echo "Environment Variables:"
          env | sort

      - name: Debug MPI Setup
        if: always()
        run: |
          echo "MPI Environment:"
          env | grep -i mpi
          echo "MPI Compiler paths:"
          which mpicc
          which mpifort
          echo "MPI Library paths:"
          find /opt/nvidia -name "libmpi*"
          find /usr -name "libmpi*"
          echo "MPI Include paths:"
          find /opt/nvidia -name "mpi*.h"
          find /usr -name "mpi*.h"
          echo "Module paths:"
          module list
          module show nvhpc-hpcx-cuda12

      - name: Check MPI Setup
        if: always()
        run: |
          echo "Checking default MPI installation:"
          which mpicc
          which mpifort
          echo "MPI Version info:"
          mpicc --version
          mpifort --version
          echo "Looking for OpenMPI/HPC-X files:"
          find /opt/nvidia -name "*mpi*"
          echo "Environment variables:"
          env | grep -i mpi

  build:
    name: Build MPAS-A with OpenACC
    runs-on: ubuntu-latest
    needs: setup
    container: 
      image: nvcr.io/nvidia/nvhpc:25.3-devel-cuda_multi-ubuntu22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download LIBBASE artifact
        uses: actions/download-artifact@v4
        with:
          name: mpas-libs-nvidia-25.3 

      - name: Extract LIBBASE
        run: |
          mkdir -p $GITHUB_WORKSPACE/mpas-libs-nvidia-25.3
          tar -xzf mpas-libs-nvidia-25.3.tar.gz -C $GITHUB_WORKSPACE/mpas-libs

      - name: Set environment variables
        shell: bash
        run: |
          # Load NVIDIA HPC SDK module
          apt-get update && apt-get install -y environment-modules
          . /etc/profile.d/modules.sh
          module use /opt/nvidia/hpc_sdk/modulefiles
          module load nvhpc-hpcx-cuda12
          
          export LIBBASE=${GITHUB_WORKSPACE:-/tmp}/mpas-libs

          export SERIAL_FC=nvfortran
          export SERIAL_F77=nvfortran
          export SERIAL_CC=nvc
          export SERIAL_CXX=nvc++
          export MPI_FC=mpifort
          export MPI_F77=mpifort
          export MPI_CC=mpicc
          export MPI_CXX=mpic++
          echo "LIBSRC=$LIBSRC" >> $GITHUB_ENV
          echo "LIBBASE=$LIBBASE" >> $GITHUB_ENV
          echo "SERIAL_FC=$SERIAL_FC" >> $GITHUB_ENV
          echo "SERIAL_F77=$SERIAL_F77" >> $GITHUB_ENV
          echo "SERIAL_CC=$SERIAL_CC" >> $GITHUB_ENV
          echo "SERIAL_CXX=$SERIAL_CXX" >> $GITHUB_ENV
          echo "MPI_FC=$MPI_FC" >> $GITHUB_ENV
          echo "MPI_F77=$MPI_F77" >> $GITHUB_ENV
          echo "MPI_CC=$MPI_CC" >> $GITHUB_ENV
          echo "MPI_CXX=$MPI_CXX" >> $GITHUB_ENV
   
          export MPAS_EXTERNAL_LIBS="-L${LIBBASE}/lib -lhdf5_hl -lhdf5 -ldl -lz -lpnetcdf"
          export MPAS_EXTERNAL_INCLUDES="-I${LIBBASE}/include"
          export PNETCDF=${LIBBASE}
          echo "MPAS_EXTERNAL_LIBS=$MPAS_EXTERNAL_LIBS" >> $GITHUB_ENV
          echo "MPAS_EXTERNAL_INCLUDES=$MPAS_EXTERNAL_INCLUDES" >> $GITHUB_ENV
          echo "PNETCDF=$PNETCDF" >> $GITHUB_ENV
        

      - name: Build MPAS-A
        run: |
          cd $GITHUB_WORKSPACE
          make -j 4 pgi CORE=atmosphere USE_PIO2=true OPENACC=true
