name: Build MPAS-A Inside NCAR HPC Development Containers

# This workflow is used to build and run MPAS-A inside NCAR HPC development containers.
# It's adapted from Ben Kirk's workflows building & testing dev containers with github actions
# NCAR/CISL Docker Hub: https://hub.docker.com/u/ncarcisl
# Ben Kirk's workflows: https://github.com/benkirk/demo_github_actions


on:
  workflow_dispatch:
    inputs:
        os:
          description: 'Base OS'
          type: choice
          required: true
          default: almalinux9
          options:
            - almalinux8
            - almalinux9
            - almalinux10
            - leap
            - tumbleweed
            - noble

jobs:

  build-run-mpas:
    strategy:
      fail-fast: false
      matrix:
        #compiler: [ nvhpc, oneapi, aocc, gcc, gcc12, gcc13, gcc14, clang ]
        compiler: [ nvhpc, gcc ]
        #mpi:      [ openmpi, mpich, mpich3 ]
        mpi:      [ openmpi, mpich3 ]
        gpu:      [ nogpu, cuda ]
        io:       [ pio, smiol ]
        arch:     [ x86_64 ]

        include:
          - mpi: openmpi
            extra_mpi_args: 'export MPI_IMPL=openmpi'
          - mpi: mpich3
            extra_mpi_args: 'export MPI_IMPL=mpich'
          - io: smiol
            extra_io_args: 'unset PIO; export USE_PIO2=false'
          - io: pio
            extra_io_args: 'export PIO_ROOT=${PIO_ROOT:-/container/pio}; export USE_PIO2=true'
          - compiler: nvhpc
            gpu: cuda
            extra_accel_args: 'export OPENACC=true'


    name: Build MPAS-A
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -elo pipefail {0}

    container:
      image: ncarcisl/cisldev-${{ matrix.arch }}-${{ inputs.os }}-${{ matrix.compiler }}-${{ matrix.mpi }}${{ matrix.gpu == 'cuda' && '-cuda' || '' }}:devel
    
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'true'
          fetch-depth: 0

      - name: Interrogate Runtime Environment
        run: |
          pwd
          ls
          find -type d
          env
          cat /container/config_env.sh
          df -h
          cat /etc/os-release 2>/dev/null || true
          uname -a
          lscpu
          nvidia-smi 2>/dev/null || true
          echo && echo && echo
          echo '----------------------------------------------------------------'
          echo && echo && echo
          echo "CC=${CC}"
          echo "CXX=${CXX}"
          echo "FC=${FC}"
          echo "F77=${F77}"
          echo
          echo "CFLAGS=${CFLAGS}"
          echo "CPPFLAGS=${CPPFLAGS}"
          echo "CXXFLAGS=${CXXFLAGS}"
          echo "FCFLAGS=${FCFLAGS}"
          echo "F77FLAGS=${F77FLAGS}"
          export CC CXX FC F77 CFLAGS CXXFLAGS FCFLAGS F77FLAGS CPPFLAGS
          which conda 2>/dev/null && conda --version || echo " --> no conda in this container"
          which mpicc
          mpicc --version 2>/dev/null || true

      - name: Build MPAS-A
        continue-on-error: false
        run: |
          chmod +x .github/workflows/build_mpas.sh

          # Use extra_io_args to set whether to use PIO or SMIOL
          if [ -n "${{ matrix.extra_io_args }}" ]; then
            eval "${{ matrix.extra_io_args }}"
          fi

          # Use extra_accel_args to set whether to use OpenACC
          if [ -n "${{ matrix.extra_accel_args }}" ]; then
            eval "${{ matrix.extra_accel_args }}"
          fi
          timeout 25m .github/workflows/build_mpas.sh

      - name: upload atmosphere_model executable
        uses: actions/upload-artifact@v4
        with:
          name: atmosphere_model-${{ matrix.compiler }}_${{ matrix.mpi }}_${{ matrix.gpu }}_${{ matrix.io }}
          path: atmosphere_model
  
  run-mpas-240km:
    needs: build-run-mpas
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -elo pipefail {0}

    container:
      image: ncarcisl/cisldev-${{ matrix.arch }}-${{ inputs.os }}-${{ matrix.compiler }}-${{ matrix.mpi }}${{ matrix.gpu == 'cuda' && '-cuda' || '' }}:devel
    
    steps:
      - name: Download atmosphere_model executable
        uses: actions/download-artifact@v4
        with:
          name: atmosphere_model-${{ matrix.compiler }}_${{ matrix.mpi }}_${{ matrix.gpu }}_${{ matrix.io }}
          path: atmosphere_model

      - name: Run MPAS-A 240km case with 1 rank
        if: matrix.gpu == 'nogpu'
        continue-on-error: true
        run: |
          chmod +x .github/workflows/run_mpas_240km.sh

          # Use extra_mpi_args to set MPI implementation
          if [ -n "${{ matrix.extra_mpi_args }}" ]; then
            eval "${{ matrix.extra_mpi_args }}"
          fi
          
          .github/workflows/run_mpas_240km.sh 1

      - name: Run MPAS-A 240km case with 4 ranks
        if: matrix.gpu == 'nogpu'
        continue-on-error: true
        run: |
          chmod +x .github/workflows/run_mpas_240km.sh

          # Use extra_mpi_args to set MPI implementation
          if [ -n "${{ matrix.extra_mpi_args }}" ]; then
            eval "${{ matrix.extra_mpi_args }}"
          fi
          
          .github/workflows/run_mpas_240km.sh 4

      - name: Upload 1 rank log files
        if: matrix.gpu == 'nogpu'
        uses: actions/upload-artifact@v4
        with:   
          name: mpas_240km_1rank_logs_${{ matrix.compiler }}_${{ matrix.mpi }}_${{ matrix.gpu }}_${{ matrix.io }}
          path: |
            240km_1/log.*

      - name: Upload 4 rank log files
        if: matrix.gpu == 'nogpu'
        uses: actions/upload-artifact@v4
        with:   
          name: mpas_240km_4rank_logs_${{ matrix.compiler }}_${{ matrix.mpi }}_${{ matrix.gpu }}_${{ matrix.io }}
          path: |
            240km_4/log.*