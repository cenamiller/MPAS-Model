name: Install MPAS Dependencies with NVIDIA OpenACC Simple

env:
  ACTIONS_STEP_DEBUG: true

on:
  workflow_dispatch:
  # push:
  #   branches:
  #     - mpas_cicd
  # pull_request:
  #   branches:
  #     - mpas_cicd

jobs:
  setup:
    name: Install MPAS Libraries for NVIDIA OpenACC
    runs-on: ubuntu-latest
    container: 
      image: nvcr.io/nvidia/nvhpc:25.3-devel-cuda_multi-ubuntu22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check MPI installation
        run: |
          mpicc --version
          mpirun --version

      - name: Check Fortran compiler
        run: |
          nvfortran --version

      - name: Install Python3
        run: |
          apt-get update
          apt-get install -y python3

      - name: Install MPICH
        run: |
          apt-get update
          apt-get install -y mpich libmpich-dev
          mpicc --version
          export MPICC=mpicc
          export MPICXX=mpic++
          export MPIFC=mpifort
          export MPIF77=mpifort
          echo "MPICC=$MPICC" >> $GITHUB_ENV
          echo "MPICXX=$MPICXX" >> $GITHUB_ENV
          echo "MPIFC=$MPIFC" >> $GITHUB_ENV
          echo "MPIF77=$MPIF77" >> $GITHUB_ENV

      - name: Set up NVIDIA environment
        run: |
          export PATH=/opt/nvidia/hpc_sdk/Linux_x86_64/25.3/compilers/bin:$PATH
          export LD_LIBRARY_PATH=/opt/nvidia/hpc_sdk/Linux_x86_64/25.3/compilers/lib:$LD_LIBRARY_PATH
          export CPATH=/opt/nvidia/hpc_sdk/Linux_x86_64/25.3/compilers/include:$CPATH
          echo "PATH=$PATH" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH" >> $GITHUB_ENV
          echo "CPATH=$CPATH" >> $GITHUB_ENV
          which nvfortran
          which nvc
          which nvc++

      - name: Set environment variables
        run: |
          export LIBSRC=/tmp/sources
          export LIBBASE=/tmp/mpas-libs
          export SERIAL_FC=nvfortran
          export SERIAL_F77=nvfortran
          export SERIAL_CC=nvc
          export SERIAL_CXX=nvc++
          export MPI_FC=mpifort
          export MPI_F77=mpifort
          export MPI_CC=mpicc
          export MPI_CXX=mpic++
          {
            echo "LIBSRC=$LIBSRC"
            echo "LIBBASE=$LIBBASE"
            echo "SERIAL_FC=$SERIAL_FC"
            echo "SERIAL_F77=$SERIAL_F77"
            echo "SERIAL_CC=$SERIAL_CC"
            echo "SERIAL_CXX=$SERIAL_CXX"
            echo "MPI_FC=$MPI_FC"
            echo "MPI_F77=$MPI_F77"
            echo "MPI_CC=$MPI_CC"
            echo "MPI_CXX=$MPI_CXX"
          } >> $GITHUB_ENV

      - name: Install PNetCDF
        run: |
          mkdir -p ${{ env.LIBSRC }}
          mkdir -p ${{ env.LIBBASE }}
          cd ${{ env.LIBSRC }}
          wget http://www2.mmm.ucar.edu/people/duda/files/mpas/sources/pnetcdf-1.11.2.tar.gz
          tar xzvf pnetcdf-1.11.2.tar.gz
          cd pnetcdf-1.11.2
          export CC=mpicc
          export FC=mpifort
          export CXX=mpic++
          ./configure --prefix=${{ env.LIBBASE }}
          make -j 4 V=1
          make install
          cd ${{ env.LIBSRC }}
          rm -rf pnetcdf-1.11.2*

      - name: Set MPAS environment variables
        run: |
          export MPAS_EXTERNAL_LIBS="-L${{ env.LIBBASE }}/lib -lpnetcdf"
          export MPAS_EXTERNAL_INCLUDES="-I${{ env.LIBBASE }}/include"
          export PNETCDF=${{ env.LIBBASE }}
          echo "MPAS_EXTERNAL_LIBS=$MPAS_EXTERNAL_LIBS" >> $GITHUB_ENV
          echo "MPAS_EXTERNAL_INCLUDES=$MPAS_EXTERNAL_INCLUDES" >> $GITHUB_ENV
          echo "PNETCDF=$PNETCDF" >> $GITHUB_ENV

      - name: Build MPAS-A
        run: |
          cd $GITHUB_WORKSPACE
          make -j 4 pgi CORE=atmosphere OPENACC=true
          echo "MPAS-A build successful"



      - name: Upload LIBBASE as artifact
        if: ${{ github.actor != 'nektos/act' && success() }}
        uses: actions/upload-artifact@v3
        with:
          name: mpas-libs-nvidia-25.3
          path: mpas-libs-nvidia.25.3.tar.gz

      - name: Debug Environment
        if: always()
        run: |
          echo "NVIDIA HPC SDK Version:"
          nvfortran --version
          echo "MPI Version:"
          mpicc --version
          echo "Environment Variables:"
          env | sort

  build:
    name: Build MPAS-A with OpenACC
    runs-on: ubuntu-latest
    needs: setup
    container: 
      image: nvcr.io/nvidia/nvhpc:25.3-devel-cuda_multi-ubuntu22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download LIBBASE artifact
        uses: actions/download-artifact@v3
        with:
          name: mpas-libs-nvidia-25.3

      - name: Extract LIBBASE
        run: |
          mkdir -p $GITHUB_WORKSPACE/mpas-libs
          tar -xzf mpas-libs-nvidia-25.3.tar.gz -C $GITHUB_WORKSPACE/mpas-libs

      - name: Install NVIDIA HPC SDK
        run: |
          wget https://developer.download.nvidia.com/hpc-sdk/25.3/nvhpc_2025_253_Linux_x86_64_cuda_multi.tar.gz
          tar xpzf nvhpc_2025_253_Linux_x86_64_cuda_multi.tar.gz
          cd nvhpc_2025_253_Linux_x86_64_cuda_multi
          ./install --accept-eula --silent
          cd ..
          rm -rf nvhpc_2025_253_Linux_x86_64_cuda_multi*

      - name: Set up NVIDIA environment
        run: |
          echo "Checking NVIDIA HPC SDK installation..."
          ls -la /opt/nvidia/hpc_sdk/
          echo "Looking for setenv.sh..."
          find /opt/nvidia/hpc_sdk -name "setenv.sh"
          
          # Set up environment variables
          export PATH=/opt/nvidia/hpc_sdk/Linux_x86_64/25.3/compilers/bin:$PATH
          export LD_LIBRARY_PATH=/opt/nvidia/hpc_sdk/Linux_x86_64/25.3/compilers/lib:$LD_LIBRARY_PATH
          export CPATH=/opt/nvidia/hpc_sdk/Linux_x86_64/25.3/compilers/include:$CPATH
          
          echo "PATH=$PATH" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH" >> $GITHUB_ENV
          echo "CPATH=$CPATH" >> $GITHUB_ENV
          
          # Verify compiler availability
          which nvfortran
          which nvc
          which nvc++

      - name: Install MPICH
        run: |
          apt-get update
          apt-get install -y mpich libmpich-dev
          mpicc --version
          # Set MPI environment variables
          export MPICC=mpicc
          export MPICXX=mpic++
          export MPIFC=mpifort
          export MPIF77=mpifort
          echo "MPICC=$MPICC" >> $GITHUB_ENV
          echo "MPICXX=$MPICXX" >> $GITHUB_ENV
          echo "MPIFC=$MPIFC" >> $GITHUB_ENV
          echo "MPIF77=$MPIF77" >> $GITHUB_ENV

      - name: Set environment variables
        run: |
          # Use absolute paths that work in both local and GitHub Actions environments
          export LIBSRC=/tmp/sources
          export LIBBASE=/tmp/mpas-libs
          export SERIAL_FC=nvfortran
          export SERIAL_F77=nvfortran
          export SERIAL_CC=nvc
          export SERIAL_CXX=nvc++
          export MPI_FC=mpifort
          export MPI_F77=mpifort
          export MPI_CC=mpicc
          export MPI_CXX=mpic++
          
          # Export all variables to GITHUB_ENV
          {
            echo "LIBSRC=$LIBSRC"
            echo "LIBBASE=$LIBBASE"
            echo "SERIAL_FC=$SERIAL_FC"
            echo "SERIAL_F77=$SERIAL_F77"
            echo "SERIAL_CC=$SERIAL_CC"
            echo "SERIAL_CXX=$SERIAL_CXX"
            echo "MPI_FC=$MPI_FC"
            echo "MPI_F77=$MPI_F77"
            echo "MPI_CC=$MPI_CC"
            echo "MPI_CXX=$MPI_CXX"
          } >> $GITHUB_ENV

      - name: Install PNetCDF
        run: |
          echo "Current directory: $(pwd)"
          echo "Compiler versions:"
          nvc --version
          nvfortran --version
          mpicc --version
          
          echo "Environment variables:"
          echo "CC=$CC"
          echo "FC=$FC"
          echo "CXX=$CXX"
          echo "PATH=$PATH"
          echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH"
          
          # Create directories
          mkdir -p ${{ env.LIBSRC }}
          mkdir -p ${{ env.LIBBASE }}
          
          # Download and extract PNetCDF
          cd ${{ env.LIBSRC }}
          wget http://www2.mmm.ucar.edu/people/duda/files/mpas/sources/pnetcdf-1.11.2.tar.gz
          tar xzvf pnetcdf-1.11.2.tar.gz
          cd pnetcdf-1.11.2
          
          # Set compiler environment
          export CC=mpicc
          export FC=mpifort
          export CXX=mpic++
          
          # Configure with debug output
          echo "Running configure..."
          ./configure --prefix=${{ env.LIBBASE }} 2>&1 | tee config.log
          CONFIG_STATUS=$?
          echo "Configure exit status: $CONFIG_STATUS"
          if [ $CONFIG_STATUS -ne 0 ]; then
            echo "Configure failed. Contents of config.log:"
            cat config.log
            exit 1
          fi
          
          # Build with debug output
          echo "Running make..."
          make -j 4 V=1 2>&1 | tee build.log
          MAKE_STATUS=$?
          echo "Make exit status: $MAKE_STATUS"
          if [ $MAKE_STATUS -ne 0 ]; then
            echo "Build failed. Contents of build.log:"
            cat build.log
            exit 1
          fi
          
          # Install with debug output
          echo "Running make install..."
          make install 2>&1 | tee install.log
          INSTALL_STATUS=$?
          echo "Install exit status: $INSTALL_STATUS"
          if [ $INSTALL_STATUS -ne 0 ]; then
            echo "Install failed. Contents of install.log:"
            cat install.log
            exit 1
          fi
          
          # Verify installation
          echo "Checking installation in LIBBASE:"
          ls -la ${{ env.LIBBASE }}
          echo "Checking lib directory:"
          ls -la ${{ env.LIBBASE }}/lib
          echo "Checking include directory:"
          ls -la ${{ env.LIBBASE }}/include
          
          # Clean up
          cd ${{ env.LIBSRC }}
          rm -rf pnetcdf-1.11.2*

      - name: Set MPAS environment variables
        run: |
          export MPAS_EXTERNAL_LIBS="-L${{ env.LIBBASE }}/lib -lpnetcdf"
          export MPAS_EXTERNAL_INCLUDES="-I${{ env.LIBBASE }}/include"
          export PNETCDF=${{ env.LIBBASE }}
          echo "MPAS_EXTERNAL_LIBS=$MPAS_EXTERNAL_LIBS" >> $GITHUB_ENV
          echo "MPAS_EXTERNAL_INCLUDES=$MPAS_EXTERNAL_INCLUDES" >> $GITHUB_ENV
          echo "PNETCDF=$PNETCDF" >> $GITHUB_ENV

      - name: Build MPAS-A
        run: |
          echo "Building MPAS-A to test PNetCDF installation..."
          cd $GITHUB_WORKSPACE
          make -j 4 pgi CORE=atmosphere OPENACC=true
          if [ $? -ne 0 ]; then
            echo "MPAS-A build failed"
            exit 1
          fi
          echo "MPAS-A build successful"

      - name: Create tarball of LIBBASE
        if: success()
        run: |
          echo "Checking LIBBASE directory:"
          ls -la ${{ env.LIBBASE }} || echo "LIBBASE directory not found"
          
          if [ ! -d "${{ env.LIBBASE }}" ]; then
            echo "Creating LIBBASE directory"
            mkdir -p ${{ env.LIBBASE }}
          fi
          
          echo "Contents of LIBBASE:"
          ls -la ${{ env.LIBBASE }}
          
          if [ -z "$(ls -A ${{ env.LIBBASE }})" ]; then
            echo "Error: LIBBASE directory is empty"
            exit 1
          fi
          
          echo "Creating tarball..."
          tar -czf mpas-libs-nvidia.25.3.tar.gz -C ${{ env.LIBBASE }} .
          
          echo "Checking tarball:"
          ls -lh mpas-libs-nvidia.25.3.tar.gz
          tar -tvf mpas-libs-nvidia.25.3.tar.gz
          
          # For local testing with nektos/act
          if [ "$GITHUB_ACTOR" = "nektos/act" ]; then
            echo "Local testing detected, copying tarball to /Users/cmille73/ ..."
            src="$(realpath mpas-libs-nvidia.25.3.tar.gz)"
            dst="$(realpath /Users/cmille73/mpas-libs-nvidia.25.3.tar.gz)"
            if [ "$src" != "$dst" ]; then
              cp "$src" "$dst"
              echo "Tarball copied to: $dst"
            else
              echo "Source and destination are the same file, skipping copy."
            fi
            ls -lh "/Users/cmille73/mpas-libs-nvidia.25.3.tar.gz"
          fi

      - name: Upload LIBBASE as artifact
        if: ${{ github.actor != 'nektos/act' && success() }}
        uses: actions/upload-artifact@v3
        with:
          name: mpas-libs-nvidia-25.3
          path: mpas-libs-nvidia.25.3.tar.gz

      - name: Debug Environment
        if: always()
        run: |
          echo "NVIDIA HPC SDK Version:"
          nvfortran --version
          echo "MPI Version:"
          mpicc --version
          echo "Environment Variables:"
          env | sort

      - name: Build MPAS-A
        run: |
          cd $GITHUB_WORKSPACE
          make -j 4 pgi CORE=atmosphere OPENACC=true
